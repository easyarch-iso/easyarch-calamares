#include "UpdateMirrorListJob.h"
#include "MirrorList.h"

#include "GlobalStorage.h"
#include "JobQueue.h"
#include "utils/CalamaresUtilsSystem.h"
#include "utils/Logger.h"

#include <QDir>
#include <QFile>
#include <QString>
#include <QStringList>
#include <QTemporaryFile>
#include <QTextStream>

UpdateMirrorListJob::UpdateMirrorListJob( MirrorList* mirrorList,
                                          QString mirrorListDir,
                                          QString mirrorListFile,
                                          QObject* parent )
    : Calamares::Job( parent )
    , m_mirrorList( mirrorList )
    , m_mirrorListDir( mirrorListDir )
    , m_mirrorListFile( mirrorListFile )
{
}

QString
UpdateMirrorListJob::prettyName() const
{
    return tr( "Update mirrorlist" );
}


Calamares::JobResult
UpdateMirrorListJob::exec()
{
    cDebug() << "Updating mirror list in the target environment";

    auto* gs = Calamares::JobQueue::instance()->globalStorage();
    QString selectedRegion = gs->value( MirrorList::GSMirrorRegionKey ).toString();
    QString selectedServer = gs->value( MirrorList::GSMirrorServerKey ).toString();
    int selectedIndex = m_mirrorList->serverIndex();
    cDebug() << "Selected Country:" << selectedRegion;
    cDebug() << "Selected Server:" << selectedServer;
    cDebug() << "Selected Server Index:" << selectedIndex;

    QStringList regionNames = m_mirrorList->regionNames();
    if ( regionNames.isEmpty() )
    {
        cDebug() << "No mirror loaded. Exiting";
        return Calamares::JobResult::ok();
    }

    if ( selectedIndex < 0 )
    {
        cDebug() << "No server selected. Exiting";
        return Calamares::JobResult::ok();
    }

    // check if the target dir exists, if not create it
    QString rootMountPoint = gs->value( "rootMountPoint" ).toString();
    QString targetMirrorListDir = rootMountPoint + m_mirrorListDir;
    QDir dir( targetMirrorListDir );
    if ( !dir.exists() )
    {
        auto procRes = CalamaresUtils::System::runCommand( CalamaresUtils::System::RunLocation::RunInHost,
                                                           { "mkdir", "-p", targetMirrorListDir } );
        if ( procRes.getExitCode() != 0 )
        {
            cError() << "Could not create" << targetMirrorListDir;
            return Calamares::JobResult::error( QString( "Could not create %1" ).arg( targetMirrorListDir ) );
        }

        cDebug() << "Created" << targetMirrorListDir;
    }

    // create a backup of the original if exists
    QString targetMirrorListFilePath = rootMountPoint + m_mirrorListDir + "/" + m_mirrorListFile;
    QFile check( targetMirrorListFilePath );
    if ( check.exists() )
    {
        cDebug() << "Mirrorlist exists in target environment. Creating a backup of it.";
        QString backupPath = targetMirrorListFilePath + ".backup";

        auto procRes = CalamaresUtils::System::runCommand( CalamaresUtils::System::RunLocation::RunInHost,
                                                           { "mv", targetMirrorListFilePath, backupPath } );
        if ( procRes.getExitCode() != 0 )
        {
            QString output = procRes.getOutput();
            cDebug() << "Backup creation failed:" << output;
            return Calamares::JobResult::error( output );
        }
    }

    // create a temporary file with updated mirrorlist
    QFile mirrorFile( targetMirrorListFilePath );
    if ( !mirrorFile.open( QIODevice::ReadWrite | QIODevice::Text ) )
    {
        cError() << "Could not open mirrorlist:" << mirrorFile.errorString();
        // NOTE: Should we return error instead of ok ?
        return Calamares::JobResult::ok();
    }
    QTextStream mirrorFileStream( &mirrorFile );
    mirrorFileStream << "##"
                     << "\n"
                     << "## Automatically generated by EasyArch installer"
                     << "\n"
                     << "## "
                     << "\n"
                     << "\n"
                     << "## " << selectedRegion << "\n"
                     << "Server = " << selectedServer << "\n"
                     << "\n";

    // write the rest of the mirrors
    for ( QString region : regionNames )
    {
        mirrorFileStream << "## " << region << "\n";
        QStringList servers = m_mirrorList->serverFullUrls( region );

        for ( int index = 0; index < servers.size(); index++ )
        {
            if ( region.compare( selectedRegion ) == 0 && index == selectedIndex )
            {
                continue;
            }

            mirrorFileStream << "Server = " << servers[ index ] << "\n";
        }

        mirrorFileStream << "\n";
    }
    mirrorFileStream.flush();
    mirrorFile.close();

    cDebug() << "Target mirrorlist created. Path:" << mirrorFile.fileName();

    return Calamares::JobResult::ok();
}